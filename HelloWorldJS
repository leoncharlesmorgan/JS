//Java script Learning Notes | Helloworld - app.js 

// When we are using javascript with smart contracts. We use the .js file to inject the objects i.e the the smart contract
is the instance?//

"function HelloWorld(Contract) {
    this.web3 = null;
    this.instance = null;
    this.Contract = Contract;
}"
// This piece of code is creating an instance, i.e in this example  the smart contract is the instance 
// In addition it allows it to react with Web3.0 js to interact with it 

// Our next step is to initalise the Smart contract "Hello World" object and create
an instance of the web3.js 

HelloWorld.prototype.init = function() {

// When then need to create a new web3 instance using a provider

this.web3 = new Web3(
        (window.web3 && window.web3.currentProvider) ||
            new Web3.providers.HttpProvider(this.Contract.endpoint)
    );
 
 
// We then need to move onto defining the address of the contract instance

this.instance = this.Contract.address
        ? contract_interface.at(this.Contract.address)
        : { message: () => {} };
};

//When store the message value stored on the instance of the contract

HelloWorld.prototype.getMessage = function(cb) {
    this.instance.message(function(error, result) {
        cb(error, result);
    });
};

// We then have to have a way to update the mesage value of the contract
//We also need a function to trigger when the button send is pressed 
in the interface

HelloWorld.prototype.setMessage = function() {
    var that = this;
    var msg = $("#message-input").val();
    this.showLoader(true);
    
// Sets message using the public update function of the smart contract
    this.instance.update(
        msg,
        {
            from: window.web3.eth.accounts[0],
            gas: 100000,
            gasPrice: 100000,
            gasLimit: 100000
        },
        function(error, txHash) {
            if (error) {
                console.log(error);
                that.showLoader(false);
            }
            
 // We then need to create an else statement o wrait for confirmation 
 of transaction. We then clear form value.
 
 else {
                that.waitForReceipt(txHash, function(receipt) {
                    that.showLoader(false);
                    if (receipt.status) {
                        console.log({ receipt });
                        $("#message-input").val("");
                    } else {
                        console.log("error");
                    }
                });
            }
        }
    );
};

// We then need for check for transaction receipt using web3.js library
method

this.web3.eth.getTransactionReceipt(hash, function(err, receipt) {
        if (err) {
            error(err);
        }
        if (receipt !== null) {
            // Transaction went through
            if (cb) {
                cb(receipt);
            }
        } else {
            // Try again in 2 second
            window.setTimeout(function() {
                that.waitForReceipt(hash, cb);
            }, 2000);
        }
    });
};

// We then want to place that code into a block
// Use the webjs 'getBlockNumber' function 

HelloWorld.prototype.getBlockNumber = function(cb) {
    this.web3.eth.getBlockNumber(function(error, result) {
        cb(error, result);
    });
};

// Hides or displays the loader when perfroming async operations

HelloWorld.prototype.showLoader = function(show) {
    document.getElementById("loader").style.display = show ? "block" : "none";
    document.getElementById("message-button").style.display = show
        ? "none"
        : "block";
};

// We now call the functions 'getMessage' and getBlockNumber'
/ Then sets the DOM element texts to the values they return or displays message

HelloWorld.prototype.updateDisplay = function() {
    var that = this;
    this.getMessage(function(error, result) {
        if (error) {
            $(".error").show();
            return;
        }
        $("#message").text(result);

        that.getBlockNumber(function(error, result) {
            if (error) {
                $(".error").show();
                return;
            }
            $("#blocknumber").text(result);
            setTimeout(function() {
                that.updateDisplay();
            }, 1000);
        });
    });
};

// We now need to pair up the setMessage function to the button defined
in app.html 

HelloWorld.prototype.bindButton = function() {
    var that = this;

    $(document).on("click", "#message-button", function() {
        that.setMessage();
    });
};

// we have to get rid of the intro content and display the main content
// Called once a contract has been deployed i/e message entered

HelloWorld.prototype.updateDisplayContent = function() {
    this.hideWelcomeContent();
    this.showMainContent();
};

// we need lines of code which makees sure a contract dont have an address 
until it has been deployed onto the block

HelloWorld.prototype.hasContractDeployed = function() {
    return this.instance && this.instance.address;
};

HelloWorld.prototype.hideWelcomeContent = function() {
    $('#welcome-container').addClass('hidden');
};

HelloWorld.prototype.showMainContent = function() {
    $('#main-container').removeClass('hidden');
};

// We need to use javascript boilerplate to create the instance of
the hellowrold object 
//Also code which allows us to show HTML elements on the page

HelloWorld.prototype.main = function() {
    $(".blocknumber").show();
    $(".message").show();
    this.updateDisplay();
};

elloWorld.prototype.onReady = function() {
    this.init();
    // Don't show interactive UI elements like input/button until
    // the contract has been deployed.
    if (this.hasContractDeployed()) {
        this.updateDisplayContent();
        this.bindButton();
    }
    this.main();
};

if (typeof Contracts === "undefined")
    var Contracts = { HelloWorld: { abi: [] } };

var helloWorld = new HelloWorld(Contracts["HelloWorld"]);

$(document).ready(function() {
    helloWorld.onReady();
});


